import asyncio, telebot
import os, re
from datetime import datetime
from telebot.async_telebot import AsyncTeleBot
from dotenv import load_dotenv
from telebot import types

load_dotenv()

TOKEN_BOT = os.getenv('TOKEN_BOT')
bot = AsyncTeleBot(TOKEN_BOT)


user_steps = {}   #user_id: step    #FSM-—Å–ª–æ–≤–∞—Ä–∏
user_data = {}    #user_id: {–¥–∞–Ω–Ω—ã–µ}


STEPS = [
    'fio', 'phone', 'address', 'animal_count', 'photo'
]    #–®–∞–≥–∏


@bot.message_handler(commands=['start', 'help'])
async def start_handler(message):
    """–°—Ç–∞—Ä—Ç"""
    chat_id = message.chat.id
    await bot.send_message(chat_id, "üêæ –ë–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –±–µ–∑–Ω–∞–¥–∑–æ—Ä–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º\n\n–ß—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –±–µ–∑–Ω–∞–¥–∑–æ—Ä–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º:\n1. –ù–∞–∂–º–∏—Ç–µ /report\n2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è\n3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Å–ª—É–∂–±—É –æ—Ç–ª–æ–≤–∞.")

@bot.message_handler(commands=['report'])
async def report_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã report"""
    user_id = message.chat.id
    user_steps[user_id] = 'fio'
    user_data[user_id] = {}
    await bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'fio')
async def handle_fio(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û"""
    if len(message.text.split()) < 2:
        await bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
        return
    user_data[message.chat.id]['fio'] = message.text
    user_steps[message.chat.id] = 'phone'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True))
    await bot.send_message(message.chat.id, "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard)

@bot.message_handler(content_types=['contact'])
async def handle_contact(message):
    """–¢–µ–ª–µ—Ñ–æ–Ω ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    if user_steps.get(message.chat.id) != 'phone':
        return
    user_data[message.chat.id]['phone'] = message.contact.phone_number
    user_steps[message.chat.id] = 'address'
    await bot.send_message(message.chat.id, "üè† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'phone')
async def handle_phone(message):
    """–¢–µ–ª–µ—Ñ–æ–Ω ‚Äî –≤—Ä—É—á–Ω—É—é"""
    phone = message.text.strip()
    if not re.match(r'^\+?\d{10,15}$', phone):
        await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    user_data[message.chat.id]['phone'] = phone
    user_steps[message.chat.id] = 'address'
    await bot.send_message(message.chat.id, "üè† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å(–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —É–ª–∏—Ü–∞, –¥–æ–º):", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'address')
async def handle_address(message):
    """–ê–¥—Ä–µ—Å"""
    if len(message.text) < 5:
        await bot.send_message(message.chat.id, "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return
    user_data[message.chat.id]['address'] = message.text
    user_steps[message.chat.id] = 'animal_count'
    await bot.send_message(message.chat.id, "üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'animal_count')
async def handle_count(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
    if not message.text.isdigit():
        await bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    user_data[message.chat.id]['animal_count'] = int(message.text)
    user_steps[message.chat.id] = 'photo'
    await bot.send_message(message.chat.id,
                           "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                           reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(content_types=['photo'])
async def handle_photo(message):
    """–§–æ—Ç–æ"""
    if user_steps.get(message.chat.id) != 'photo':
        return
    user_data[message.chat.id]['photo'] = message.photo[-1].file_id

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'photo' and m.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def skip_photo(message):
    """–ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ"""
    user_data[message.chat.id]['photo'] = None
    user_steps[message.chat.id] = 'description'
    await bot.send_message(message.chat.id, "‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'description')
async def handle_description(message):
    """–û–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏"""
    chat_id = message.chat.id
    user_data[chat_id]['description'] = message.text
    await bot.send_message(chat_id,
                           f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                           f"üìå –ê–¥—Ä–µ—Å: {user_data[chat_id]['address']}\n"
                           f"üî¢ –ö–æ–ª-–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {user_data[chat_id]['animal_count']}\n"
                           f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                           "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!")


if __name__ == "__main__":
    asyncio.run(bot.infinity_polling())
