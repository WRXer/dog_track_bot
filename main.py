import asyncio, os, re
from datetime import datetime
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from dotenv import load_dotenv

from ggl_api import save_to_google_sheet    #–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets


load_dotenv()

TOKEN_BOT = os.getenv('TOKEN_BOT')
bot = AsyncTeleBot(TOKEN_BOT)

user_steps = {}    #user_id: step
user_data = {}    #user_id: dict —Å –¥–∞–Ω–Ω—ã–º–∏

STEPS = ['fio', 'phone', 'address', 'animal_count', 'photo', 'description']    #–®–∞–≥–∏

@bot.message_handler(commands=['start', 'help'])
async def start_handler(message):
    """–°—Ç–∞—Ä—Ç"""
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="new_report"))
    await bot.send_message(
        message.chat.id,
        "üêæ –ë–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –±–µ–∑–Ω–∞–¥–∑–æ—Ä–Ω—ã–º –∂–∏–≤–æ—Ç–Ω—ã–º\n\n"
        "–ß—Ç–æ–±—ã —Å–æ–æ–±—â–∏—Ç—å –æ –±–µ–∑–Ω–∞–¥–∑–æ—Ä–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )

@bot.callback_query_handler(func=lambda c: c.data == 'new_report')
async def start_report_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã report"""
    user_id = call.message.chat.id
    user_steps[user_id] = 'fio'
    user_data[user_id] = {}
    await bot.answer_callback_query(call.id)
    await bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'fio')
async def handle_fio(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –§–ò–û"""
    if len(message.text.split()) < 2:
        await bot.send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
        return
    user_data[message.chat.id]['fio'] = message.text
    user_steps[message.chat.id] = 'phone'
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True))
    await bot.send_message(message.chat.id, "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=keyboard)

@bot.message_handler(content_types=['contact'])
async def handle_contact(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if user_steps.get(message.chat.id) != 'phone':
        return
    user_data[message.chat.id]['phone'] = message.contact.phone_number
    user_steps[message.chat.id] = 'address'
    await bot.send_message(message.chat.id, "üè† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å (–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —É–ª–∏—Ü–∞, –¥–æ–º):", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'phone')
async def handle_phone(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = message.text.strip()
    if not re.match(r'^\+?\d{10,15}$', phone):
        await bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +79161234567")
        return
    user_data[message.chat.id]['phone'] = phone
    user_steps[message.chat.id] = 'address'
    await bot.send_message(message.chat.id, "üè† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å (–Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç, —É–ª–∏—Ü–∞, –¥–æ–º):", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'address')
async def handle_address(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞"""
    if len(message.text) < 5:
        await bot.send_message(message.chat.id, "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return
    user_data[message.chat.id]['address'] = message.text
    user_steps[message.chat.id] = 'animal_count'
    await bot.send_message(message.chat.id, "üî¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–∑–Ω–∞–¥–∑–æ—Ä–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'animal_count')
async def handle_count(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
    if not message.text.isdigit():
        await bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    user_data[message.chat.id]['animal_count'] = int(message.text)
    user_steps[message.chat.id] = 'photo'
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üì∑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data='skip_photo'))
    await bot.send_message(message.chat.id, "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                           reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'skip_photo')
async def skip_photo(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ"""
    user_data[call.message.chat.id]['photo'] = None
    user_steps[call.message.chat.id] = 'description'
    await bot.send_message(call.message.chat.id, "‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@bot.message_handler(content_types=['photo'])
async def handle_photo(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    if user_steps.get(message.chat.id) != 'photo':
        return
    file_id = message.photo[-1].file_id
    user_data[message.chat.id]['photo_id'] = file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    photo_url = f"https://api.telegram.org/file/bot{TOKEN_BOT}/{file_path}"    #–ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ
    user_data[message.chat.id]['photo_url'] = photo_url
    user_steps[message.chat.id] = 'description'
    await bot.send_message(message.chat.id, "‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'photo' and m.text and m.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
async def skip_photo(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–æ—Ç–æ"""
    user_data[message.chat.id]['photo_id'] = None
    user_data[message.chat.id]['photo_url'] = None
    user_steps[message.chat.id] = 'description'
    await bot.send_message(message.chat.id, "‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π / –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:")

@bot.message_handler(func=lambda m: user_steps.get(m.chat.id) == 'description')
async def handle_description(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    chat_id = message.chat.id
    user_data[chat_id]['description'] = message.text
    try:
        save_to_google_sheet(user_data[chat_id])    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
    except Exception as e:
        await bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        return
    await bot.send_message(
        chat_id,
        f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        f"üìå –ê–¥—Ä–µ—Å: {user_data[chat_id]['address']}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {user_data[chat_id]['animal_count']}\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", callback_data="new_report")
        )
    )
    del user_steps[chat_id]    #–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    del user_data[chat_id]


if __name__ == "__main__":
    asyncio.run(bot.infinity_polling())
